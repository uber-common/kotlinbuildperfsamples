/*
 * Copyright (c) 2019 Uber Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.uber.model.core.generated.example;

import androidx.annotation.Nullable;
import androidx.annotation.VisibleForTesting;
import com.google.errorprone.annotations.Immutable;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.uber.errorprone.annotations.DoNotMock;
import com.uber.errorprone.annotations.DoNotSubclass;
import com.uber.model.core.adapter.gson.GsonSerializable;
import com.uber.model.core.annotation.Property;
import com.uber.model.core.annotation.RequiredMethods;
import com.uber.model.core.annotation.ThriftElement;
import com.uber.model.core.annotation.UnionType;
import javax.annotation.Generated;

@Generated(
  value = "com.uber.codegen.compiler.JavaThriftCodeGenCodeGenerator",
  comments = "This code was generated by the Uber ThriftCodeGen Compiler from: example.thrift"
)
@ThriftElement
@DoNotMock("Create a real instance via the builder(), builderWithDefaults(), or stub().")
@Immutable
@DoNotSubclass("This should be treated as final, and is only non-final for legacy reasons")
@UnionType
@GsonSerializable(SampleUnion_GsonTypeAdapter.class)
public class SampleUnion {
  private final SampleUnionUnionType type;

  @Nullable private final String option1;

  @Nullable private final Boolean option2;

  @Nullable private final Integer option3;

  @LazyInit private transient volatile int $hashCode;

  @LazyInit private transient volatile boolean $hashCodeMemoized;

  @LazyInit private transient volatile String $toString;

  private SampleUnion(
      SampleUnionUnionType type,
      @Nullable String option1,
      @Nullable Boolean option2,
      @Nullable Integer option3) {
    this.type = type;
    this.option1 = option1;
    this.option2 = option2;
    this.option3 = option3;
  }

  static Builder builder() {
    return new Builder();
  }

  public boolean isOption1() {
    return type() == SampleUnionUnionType.OPTION1;
  }

  public boolean isOption2() {
    return type() == SampleUnionUnionType.OPTION2;
  }

  public boolean isOption3() {
    return type() == SampleUnionUnionType.OPTION3;
  }

  @Property
  public SampleUnionUnionType type() {
    return type;
  }

  @Property
  @Nullable
  public String option1() {
    return option1;
  }

  @Property
  @Nullable
  public Boolean option2() {
    return option2;
  }

  @Property
  @Nullable
  public Integer option3() {
    return option3;
  }

  /** Initializes a builder to the same property values as as this existing instance's values. */
  Builder toBuilder() {
    return new Builder(this);
  }

  @VisibleForTesting(otherwise = VisibleForTesting.NONE)
  static Builder builderWithDefaults() {
    return builder().type(SampleUnionUnionType.values()[0]);
  }

  @VisibleForTesting(otherwise = VisibleForTesting.NONE)
  public static SampleUnion stub() {
    return builderWithDefaults().build();
  }

  @Override
  public boolean equals(@Nullable Object o) {
    if (o == null) {
      return false;
    }
    if (o == this) {
      return true;
    }
    if (o instanceof SampleUnion) {
      SampleUnion that = (SampleUnion) o;
      return this.type.equals(that.type)
          && ((this.option1 == null) ? (that.option1 == null) : this.option1.equals(that.option1))
          && ((this.option2 == null) ? (that.option2 == null) : this.option2.equals(that.option2))
          && ((this.option3 == null) ? (that.option3 == null) : this.option3.equals(that.option3));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= type.hashCode();
      h *= 1000003;
      h ^= (option1 == null) ? 0 : option1.hashCode();
      h *= 1000003;
      h ^= (option2 == null) ? 0 : option2.hashCode();
      h *= 1000003;
      h ^= (option3 == null) ? 0 : option3.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  public final boolean isUnknown() {
    return type == SampleUnionUnionType.UNKNOWN;
  }

  public static final SampleUnion createOption1(@Nullable String option1) {
    return builder().option1(option1).type(SampleUnionUnionType.OPTION1).build();
  }

  public static final SampleUnion createOption2(@Nullable Boolean option2) {
    return builder().option2(option2).type(SampleUnionUnionType.OPTION2).build();
  }

  public static final SampleUnion createOption3(@Nullable Integer option3) {
    return builder().option3(option3).type(SampleUnionUnionType.OPTION3).build();
  }

  @VisibleForTesting(otherwise = VisibleForTesting.NONE)
  public static final SampleUnion createUnknown() {
    return builder().type(SampleUnionUnionType.UNKNOWN).build();
  }

  @Override
  public String toString() {
    if ($toString == null) {
      String _presentField;
      String _presentFieldValue;
      if (option1 != null) {
        _presentField = "option1";
        _presentFieldValue = option1.toString();
      } else if (option2 != null) {
        _presentField = "option2";
        _presentFieldValue = option2.toString();
      } else {
        _presentField = "option3";
        _presentFieldValue = String.valueOf(option3);
      }
      $toString =
          "SampleUnion(" + "type=" + type + ", " + _presentField + "=" + _presentFieldValue + ")";
    }
    return $toString;
  }

  @DoNotMock
  @ThriftElement.Builder
  static final class Builder {
    @LazyInit private SampleUnionUnionType type = SampleUnionUnionType.UNKNOWN;

    @Nullable private String option1 = null;

    @Nullable private Boolean option2 = null;

    @Nullable private Integer option3 = null;

    private Builder() {}

    private Builder(SampleUnion source) {
      this.type = source.type();
      this.option1 = source.option1();
      this.option2 = source.option2();
      this.option3 = source.option3();
    }

    @SuppressWarnings("BannedClassNewInstance")
    public Builder type(SampleUnionUnionType type) {
      if (type == null) {
        throw new NullPointerException("Null type");
      }
      this.type = type;
      return this;
    }

    public Builder option1(@Nullable String option1) {
      this.option1 = option1;
      return this;
    }

    public Builder option2(@Nullable Boolean option2) {
      this.option2 = option2;
      return this;
    }

    public Builder option3(@Nullable Integer option3) {
      this.option3 = option3;
      return this;
    }

    /**
     * Builds an instance.
     *
     * <p><em>NOTE:</em> The following required properties must be set in order to be valid.
     *
     * <ul>
     *   <li>{@link #type}
     * </ul>
     */
    @RequiredMethods({"type"})
    public SampleUnion build() {
      String missingPropertySpecs = "";
      if (type == null) {
        missingPropertySpecs += " type";
      }
      if (!missingPropertySpecs.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missingPropertySpecs);
      }
      return new SampleUnion(type, option1, option2, option3);
    }
  }
}
