/*
 * Copyright (c) 2019 Uber Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.uber.model.core.generated.example;

import androidx.annotation.Nullable;
import androidx.annotation.VisibleForTesting;
import com.google.errorprone.annotations.Immutable;
import com.google.errorprone.annotations.RestrictedApi;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.uber.errorprone.annotations.DoNotSubclass;
import com.uber.presidio.realtime.core.RealtimeClient;
import com.uber.presidio.realtime.core.error.Error;
import com.uber.presidio.realtime.core.error.ErrorAdapter;
import com.uber.presidio.realtime.core.error.RequestException;
import java.io.IOException;
import javax.annotation.Generated;

/** Errors for {@link SampleServiceClient#emptyResponse} */
@Generated(
  value = "ThriftCodeGen Compiler",
  comments = "This code was generated by the Uber ThriftCodeGen Compiler from: example.thrift"
)
@DoNotSubclass("This should be treated as final, and is only non-final for legacy reasons")
@SuppressWarnings("NullAway")
@Immutable
public class EmptyResponseErrors extends Error {
  private final String code;

  @Nullable private final BadRequest badRequest;

  @Nullable private final Unauthenticated unauthenticated;

  @Nullable private final ServerError serverError;

  @Nullable private final RateLimited rateLimited;

  @Nullable private final NoContent noContent;

  @LazyInit private transient volatile int $hashCode;

  @LazyInit private transient volatile boolean $hashCodeMemoized;

  @LazyInit private transient volatile String $toString;

  private EmptyResponseErrors(
      String code,
      @Nullable BadRequest badRequest,
      @Nullable Unauthenticated unauthenticated,
      @Nullable ServerError serverError,
      @Nullable RateLimited rateLimited,
      @Nullable NoContent noContent) {
    this.code = code;
    this.badRequest = badRequest;
    this.unauthenticated = unauthenticated;
    this.serverError = serverError;
    this.rateLimited = rateLimited;
    this.noContent = noContent;
  }

  @Override
  public String code() {
    return code;
  }

  @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
  public static EmptyResponseErrors unknown() {
    return new EmptyResponseErrors(UNKNOWN_CODE, null, null, null, null, null);
  }

  @Nullable
  public BadRequest badRequest() {
    return badRequest;
  }

  public static EmptyResponseErrors ofBadRequest(BadRequest value) {
    return new EmptyResponseErrors("BAD_REQUEST", value, null, null, null, null);
  }

  @Nullable
  public Unauthenticated unauthenticated() {
    return unauthenticated;
  }

  public static EmptyResponseErrors ofUnauthenticated(Unauthenticated value) {
    return new EmptyResponseErrors("UNAUTHENTICATED", null, value, null, null, null);
  }

  @Nullable
  public ServerError serverError() {
    return serverError;
  }

  public static EmptyResponseErrors ofServerError(ServerError value) {
    return new EmptyResponseErrors("SERVER_ERROR", null, null, value, null, null);
  }

  @Nullable
  public RateLimited rateLimited() {
    return rateLimited;
  }

  public static EmptyResponseErrors ofRateLimited(RateLimited value) {
    return new EmptyResponseErrors("RATE_LIMITED", null, null, null, value, null);
  }

  @Nullable
  public NoContent noContent() {
    return noContent;
  }

  public static EmptyResponseErrors ofNoContent() {
    return new EmptyResponseErrors("", null, null, null, null, NoContent.INSTANCE);
  }

  @RestrictedApi(
    explanation = "This is intended only to be used from generated clients.",
    link = "",
    whitelistAnnotations = {
      Generated.class,
      RealtimeClient.TemporaryNonGeneratedRealtimeUsage.class
    }
  )
  public static EmptyResponseErrors create(ErrorAdapter errorAdapter) throws IOException {
    try {
      RequestException requestException = errorAdapter.requestException();
      switch (requestException.kind()) {
        case RPC_CODE:
          {
            // RPC-style codes
            switch (requestException.rpcCode()) {
              case "rateLimited":
                {
                  return ofRateLimited(errorAdapter.read(RateLimited.class));
                }
            }
            break;
          }
        case STATUS_CODE:
          {
            // REST-style HTTP status codes
            switch (requestException.statusCode()) {
              case 400:
                {
                  return ofBadRequest(errorAdapter.read(BadRequest.class));
                }
              case 204:
                {
                  errorAdapter.close();
                  return ofNoContent();
                }
              case 500:
                {
                  return ofServerError(errorAdapter.read(ServerError.class));
                }
              case 401:
                {
                  return ofUnauthenticated(errorAdapter.read(Unauthenticated.class));
                }
            }
            break;
          }
      }
    } catch (Exception ignored) {
      // This can happen if the server error us unrecognized to this client, gracefully fall back to
      // unknown
    }
    return unknown();
  }

  @Override
  public boolean equals(@Nullable Object o) {
    if (o == null) {
      return false;
    }
    if (o == this) {
      return true;
    }
    if (o instanceof EmptyResponseErrors) {
      EmptyResponseErrors that = (EmptyResponseErrors) o;
      return this.code.equals(that.code)
          && ((this.badRequest == null)
              ? (that.badRequest == null)
              : this.badRequest.equals(that.badRequest))
          && ((this.unauthenticated == null)
              ? (that.unauthenticated == null)
              : this.unauthenticated.equals(that.unauthenticated))
          && ((this.serverError == null)
              ? (that.serverError == null)
              : this.serverError.equals(that.serverError))
          && ((this.rateLimited == null)
              ? (that.rateLimited == null)
              : this.rateLimited.equals(that.rateLimited))
          && ((this.noContent == null)
              ? (that.noContent == null)
              : this.noContent.equals(that.noContent));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= code.hashCode();
      h *= 1000003;
      h ^= (badRequest == null) ? 0 : badRequest.hashCode();
      h *= 1000003;
      h ^= (unauthenticated == null) ? 0 : unauthenticated.hashCode();
      h *= 1000003;
      h ^= (serverError == null) ? 0 : serverError.hashCode();
      h *= 1000003;
      h ^= (rateLimited == null) ? 0 : rateLimited.hashCode();
      h *= 1000003;
      h ^= (noContent == null) ? 0 : noContent.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      String _presentField;
      String _presentFieldValue;
      if (code != null) {
        _presentField = "code";
        _presentFieldValue = code.toString();
      } else if (badRequest != null) {
        _presentField = "badRequest";
        _presentFieldValue = badRequest.toString();
      } else if (unauthenticated != null) {
        _presentField = "unauthenticated";
        _presentFieldValue = unauthenticated.toString();
      } else if (serverError != null) {
        _presentField = "serverError";
        _presentFieldValue = serverError.toString();
      } else if (rateLimited != null) {
        _presentField = "rateLimited";
        _presentFieldValue = rateLimited.toString();
      } else {
        _presentField = "noContent";
        _presentFieldValue = String.valueOf(noContent);
      }
      $toString = "EmptyResponseErrors(" + _presentField + "=" + _presentFieldValue + ")";
    }
    return $toString;
  }
}
