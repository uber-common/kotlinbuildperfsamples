package com.uber.model.core.generated.example;

import androidx.annotation.Nullable;
import androidx.annotation.VisibleForTesting;
import com.google.errorprone.annotations.Immutable;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.uber.errorprone.annotations.DoNotMock;
import com.uber.errorprone.annotations.DoNotSubclass;
import com.uber.model.core.adapter.gson.GsonSerializable;
import com.uber.model.core.annotation.Property;
import com.uber.model.core.annotation.RequiredMethods;
import com.uber.model.core.annotation.ThriftElement;
import com.ubercab.common.collect.ImmutableMap;
import java.util.Map;
import javax.annotation.Generated;

@Generated(
  value = "com.uber.codegen.compiler.JavaThriftCodeGenCodeGenerator",
  comments = "This code was generated by the Uber ThriftCodeGen Compiler from: example.thrift"
)
@ThriftElement
@DoNotMock("Create a real instance via the builder(), builderWithDefaults(), or stub().")
@Immutable
@DoNotSubclass("This should be treated as final, and is only non-final for legacy reasons")
@GsonSerializable(BadRequest_GsonTypeAdapter.class)
public class BadRequest {
  private final BadRequestCode code;

  private final String message;

  @Nullable private final ImmutableMap<String, String> data;

  @LazyInit private transient volatile String $toString;

  @LazyInit private transient volatile int $hashCode;

  @LazyInit private transient volatile boolean $hashCodeMemoized;

  private BadRequest(
      BadRequestCode code, String message, @Nullable ImmutableMap<String, String> data) {
    this.code = code;
    this.message = message;
    this.data = data;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Property
  public BadRequestCode code() {
    return code;
  }

  @Property
  public String message() {
    return message;
  }

  @Property
  @Nullable
  public ImmutableMap<String, String> data() {
    return data;
  }

  /** Initializes a builder to the same property values as as this existing instance's values. */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @VisibleForTesting(otherwise = VisibleForTesting.NONE)
  public static Builder builderWithDefaults() {
    return builder().code(BadRequestCode.values()[0]).message("Stub");
  }

  @VisibleForTesting(otherwise = VisibleForTesting.NONE)
  public static BadRequest stub() {
    return builderWithDefaults().build();
  }

  @Override
  public boolean equals(@Nullable Object o) {
    if (o == null) {
      return false;
    }
    if (o == this) {
      return true;
    }
    if (o instanceof BadRequest) {
      BadRequest that = (BadRequest) o;
      return this.code.equals(that.code)
          && this.message.equals(that.message)
          && ((this.data == null) ? (that.data == null) : this.data.equals(that.data));
    }
    return false;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString =
          "BadRequest("
              + "code="
              + code
              + ", "
              + "message="
              + message
              + ", "
              + "data="
              + data
              + ")";
    }
    return $toString;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= code.hashCode();
      h *= 1000003;
      h ^= message.hashCode();
      h *= 1000003;
      h ^= (data == null) ? 0 : data.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @DoNotMock
  @ThriftElement.Builder
  public static final class Builder {
    @LazyInit private BadRequestCode code;

    @LazyInit private String message;

    @Nullable private Map<String, String> data = null;

    private Builder() {}

    private Builder(BadRequest source) {
      this.code = source.code();
      this.message = source.message();
      this.data = source.data();
    }

    @SuppressWarnings("BannedClassNewInstance")
    public Builder code(BadRequestCode code) {
      if (code == null) {
        throw new NullPointerException("Null code");
      }
      this.code = code;
      return this;
    }

    @SuppressWarnings("BannedClassNewInstance")
    public Builder message(String message) {
      if (message == null) {
        throw new NullPointerException("Null message");
      }
      this.message = message;
      return this;
    }

    public Builder data(@Nullable Map<String, String> data) {
      this.data = data;
      return this;
    }

    /**
     * Builds an instance.
     *
     * <p><em>NOTE:</em> The following required properties must be set in order to be valid.
     *
     * <ul>
     *   <li>{@link #code}
     *   <li>{@link #message}
     * </ul>
     */
    @RequiredMethods({"code", "message"})
    public BadRequest build() {
      String missingPropertySpecs = "";
      if (code == null) {
        missingPropertySpecs += " code";
      }
      if (message == null) {
        missingPropertySpecs += " message";
      }
      if (!missingPropertySpecs.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missingPropertySpecs);
      }
      return new BadRequest(code, message, data == null ? null : ImmutableMap.copyOf(data));
    }
  }
}
