/*
 * Copyright (c) 2019 Uber Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.uber.model.core.generated.example

import androidx.annotation.VisibleForTesting
import com.google.errorprone.annotations.Immutable
import com.squareup.moshi.JsonClass
import com.uber.errorprone.annotations.DoNotMock
import com.uber.errorprone.annotations.JavaOnly
import com.uber.errorprone.annotations.KotlinOnly
import com.uber.model.core.annotation.Property
import com.uber.model.core.annotation.RequiredMethods
import com.uber.model.core.annotation.ThriftElement
import com.uber.model.core.annotation.UnionType
import javax.annotation.Generated
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmName
import kotlin.jvm.JvmStatic

@Generated(
    "com.uber.codegen.compiler.KotlinThriftCodeGenCodeGenerator",
    comments = "This code was generated by the Uber ThriftCodeGen Compiler from: example.thrift"
)
@ThriftElement
@DoNotMock("Create a real instance via the constructor (Kotlin) or builder(), builderWithDefaults(), or stub() (Java).")
@Immutable
@UnionType
@JsonClass(generateAdapter = true)
data class SampleUnion @KotlinOnly constructor(
  @Property @get:JvmName("type") val type: SampleUnionUnionType = SampleUnionUnionType.UNKNOWN,
  @Property @get:JvmName("option1") val option1: String? = null,
  @Property @get:JvmName("option2") val option2: Boolean? = null,
  @Property @get:JvmName("option3") val option3: Int? = null
) {
  internal val _toString: String by lazy<String> {
    val _presentField: String
    val _presentFieldValue: String
    if (option1 != null) {
      _presentField = "option1"
      _presentFieldValue = option1.toString()
    } else if (option2 != null) {
      _presentField = "option2"
      _presentFieldValue = option2.toString()
    } else {
      _presentField = "option3"
      _presentFieldValue = option3.toString()
    }
    return@lazy "SampleUnion(" + "type=" + type + ", " + _presentField + "=" + _presentFieldValue +
        ")"
  }


  fun isOption1(): Boolean = type == SampleUnionUnionType.OPTION1

  fun isOption2(): Boolean = type == SampleUnionUnionType.OPTION2

  fun isOption3(): Boolean = type == SampleUnionUnionType.OPTION3

  /**
   * Initializes a builder to the same property values as as this existing instance's values.
   */
  @JavaOnly
  internal fun toBuilder(): Builder =
      Builder(type = this.type, option1 = this.option1, option2 = this.option2, option3 = this.option3)

  override fun toString(): String = _toString

  fun isUnknown(): Boolean = type == SampleUnionUnionType.UNKNOWN

  @DoNotMock
  @ThriftElement.Builder
  class Builder internal constructor(
    private var type: SampleUnionUnionType? = SampleUnionUnionType.UNKNOWN,
    private var option1: String? = null,
    private var option2: Boolean? = null,
    private var option3: Int? = null
  ) {
    fun type(type: SampleUnionUnionType): Builder = apply {
      this.type = type
    }

    fun option1(option1: String?): Builder = apply {
      this.option1 = option1
    }

    fun option2(option2: Boolean?): Builder = apply {
      this.option2 = option2
    }

    fun option3(option3: Int?): Builder = apply {
      this.option3 = option3
    }

    /**
     * Builds an instance.
     *
     * **NOTE:** The following required properties must be set in order to be valid.
     * - [type]
     */
    @RequiredMethods("type")
    fun build(): SampleUnion {
      return SampleUnion(
          type = type ?: throw NullPointerException("type is null!"),
          option1 = option1,
          option2 = option2,
          option3 = option3
          )
    }
  }

  companion object {
    @JavaOnly
    @JvmStatic
    fun builder(): Builder = Builder()

    @JavaOnly
    @JvmStatic
    @VisibleForTesting(otherwise = 5)
    fun builderWithDefaults(): Builder = builder()
            .type(SampleUnionUnionType.values()[0])

    @JavaOnly
    @JvmStatic
    @VisibleForTesting(otherwise = 5)
    fun stub(): SampleUnion = builderWithDefaults().build()

    @JvmStatic
    fun createOption1(option1: String?): SampleUnion = SampleUnion(type =
        SampleUnionUnionType.OPTION1, option1 = option1)

    @JvmStatic
    fun createOption2(option2: Boolean?): SampleUnion = SampleUnion(type =
        SampleUnionUnionType.OPTION2, option2 = option2)

    @JvmStatic
    fun createOption3(option3: Int?): SampleUnion = SampleUnion(type = SampleUnionUnionType.OPTION3,
        option3 = option3)

    @VisibleForTesting(otherwise = 5)
    @JvmStatic
    fun createUnknown(): SampleUnion = SampleUnion(type = SampleUnionUnionType.UNKNOWN)
  }
}
