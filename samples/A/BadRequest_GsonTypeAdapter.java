package com.uber.model.core.generated.example;

import androidx.annotation.Nullable;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import com.uber.model.core.adapter.gson.GsonSerializable;
import com.ubercab.common.collect.ImmutableMap;
import java.io.IOException;
import javax.annotation.Generated;

@Generated(
  value = "GsonTypeProcessor",
  comments = "This code was generated by the Uber GsonTypeProcessor"
)
@GsonSerializable.ConstructorParameterCount(1)
final class BadRequest_GsonTypeAdapter extends TypeAdapter<BadRequest> {
  private final Gson gson;

  @LazyInit private volatile TypeAdapter<BadRequestCode> badRequestCode_adapter;

  @LazyInit
  private volatile TypeAdapter<ImmutableMap<String, String>> immutableMap__string_string_adapter;

  public BadRequest_GsonTypeAdapter(Gson gson) {
    this.gson = gson;
  }

  @Override
  public void write(JsonWriter jsonWriter, BadRequest object) throws IOException {
    if (object == null) {
      jsonWriter.nullValue();
      return;
    }
    jsonWriter.beginObject();
    jsonWriter.name("code");
    if (object.code() == null) {
      jsonWriter.nullValue();
    } else {
      if (badRequestCode_adapter == null) {
        this.badRequestCode_adapter =
            (gson.getAdapter(com.uber.model.core.generated.example.BadRequestCode.class));
      }
      badRequestCode_adapter.write(jsonWriter, object.code());
    }
    jsonWriter.name("message");
    jsonWriter.value(object.message());
    jsonWriter.name("data");
    if (object.data() == null) {
      jsonWriter.nullValue();
    } else {
      if (immutableMap__string_string_adapter == null) {
        this.immutableMap__string_string_adapter =
            ((com.google.gson.TypeAdapter<
                    com.ubercab.common.collect.ImmutableMap<java.lang.String, java.lang.String>>)
                gson.getAdapter(
                    com.google.gson.reflect.TypeToken.getParameterized(
                        com.ubercab.common.collect.ImmutableMap.class,
                        java.lang.String.class,
                        java.lang.String.class)));
      }
      immutableMap__string_string_adapter.write(jsonWriter, object.data());
    }
    jsonWriter.endObject();
  }

  @Nullable
  @Override
  public BadRequest read(JsonReader jsonReader) throws IOException {
    if (jsonReader.peek() == JsonToken.NULL) {
      jsonReader.nextNull();
      return null;
    }
    jsonReader.beginObject();
    BadRequest.Builder _builder = BadRequest.builder();
    while (jsonReader.hasNext()) {
      String _name = jsonReader.nextName();
      if (jsonReader.peek() == JsonToken.NULL) {
        jsonReader.nextNull();
        continue;
      }
      switch (_name) {
        case "code":
          {
            if (badRequestCode_adapter == null) {
              this.badRequestCode_adapter =
                  (gson.getAdapter(com.uber.model.core.generated.example.BadRequestCode.class));
            }
            _builder.code(badRequestCode_adapter.read(jsonReader));
            break;
          }
        case "message":
          {
            _builder.message(jsonReader.nextString());
            break;
          }
        case "data":
          {
            if (immutableMap__string_string_adapter == null) {
              this.immutableMap__string_string_adapter =
                  ((com.google.gson.TypeAdapter<
                          com.ubercab.common.collect.ImmutableMap<
                              java.lang.String, java.lang.String>>)
                      gson.getAdapter(
                          com.google.gson.reflect.TypeToken.getParameterized(
                              com.ubercab.common.collect.ImmutableMap.class,
                              java.lang.String.class,
                              java.lang.String.class)));
            }
            _builder.data(immutableMap__string_string_adapter.read(jsonReader));
            break;
          }
        default:
          {
            jsonReader.skipValue();
          }
      }
    }
    jsonReader.endObject();
    return _builder.build();
  }
}
